// ‚úÖ CONFIGURA√á√ÉO DA API COM CORS PROXY
const API_URL = 'https://coliseum-api.onrender.com';

// ‚úÖ PROXY PARA EVITAR CORS (fallback)
const CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';

// ‚úÖ 1. FUN√á√ÉO atualizarModo - Controla modo Login/Registro
function atualizarModo() {
    console.log('üîÑ Atualizando modo de login/registro...');
    
    const ra = document.getElementById('ra')?.value.trim() || '';
    const nome = document.getElementById('nome')?.value.trim() || '';
    const serie = document.getElementById('serie')?.value.trim() || '';
    const senha = document.getElementById('senha')?.value || '';
    
    const btnAcao = document.getElementById('btnAcao');
    const modoInfo = document.getElementById('modoInfo');
    const nomeGroup = document.getElementById('nome-group');
    const serieGroup = document.getElementById('serie-group');

    if (!btnAcao || !modoInfo || !nomeGroup || !serieGroup) {
        console.log('‚ö†Ô∏è Elementos do modo n√£o encontrados ainda');
        return;
    }

    const temRaSenha = ra && senha;
    const temNomeSerie = nome || serie;
    
    if (temRaSenha && !temNomeSerie) {
        // Modo LOGIN
        btnAcao.textContent = 'Entrar';
        modoInfo.textContent = 'üí° Modo LOGIN - Digite RA e senha para entrar';
        nomeGroup.classList.add('hidden');
        serieGroup.classList.add('hidden');
        console.log('üîë Modo: LOGIN');
    } else if (temRaSenha && temNomeSerie) {
        // Modo REGISTRO
        btnAcao.textContent = 'Registrar';
        modoInfo.textContent = 'üí° Modo REGISTRO - Preencha todos os campos';
        nomeGroup.classList.remove('hidden');
        serieGroup.classList.remove('hidden');
        console.log('üìù Modo: REGISTRO');
    } else {
        // Estado neutro
        btnAcao.textContent = 'Entrar/Registrar';
        modoInfo.textContent = 'üí° Digite RA e senha para entrar ou todos os campos para registrar';
        nomeGroup.classList.remove('hidden');
        serieGroup.classList.remove('hidden');
        console.log('‚ö° Modo: NEUTRO');
    }
}

// ‚úÖ 2. FUN√á√ÉO validarSerie - Valida a s√©rie informada
function validarSerie(serie) {
    if (!serie || serie.trim() === '') {
        return false;
    }
    
    serie = serie.toUpperCase().trim();
    
    const seriesValidas = [
        "6 ANO", "7 ANO", "8 ANO", "9 ANO",
        "1 ANO", "2 ANO", "3 ANO",
        "1 ANO EM", "2 ANO EM", "3 ANO EM", 
        "1 ANO ENSINO M√âDIO", "2 ANO ENSINO M√âDIO", "3 ANO ENSINO M√âDIO",
        "1¬∫ ANO", "2¬∫ ANO", "3¬∫ ANO", "6¬∫ ANO", "7¬∫ ANO", "8¬∫ ANO", "9¬∫ ANO",
        "PRIMEIRO ANO", "SEGUNDO ANO", "TERCEIRO ANO",
        "1¬∞ ANO", "2¬∞ ANO", "3¬∞ ANO"
    ];
    
    if (seriesValidas.includes(serie)) {
        return true;
    }
    
    const padroesValidos = [
        /^(1|2|3|6|7|8|9)(¬∫|¬∞)?\s*ANO/i,
        /^(PRIMEIRO|SEGUNDO|TERCEIRO)\s+ANO/i,
        /^(1|2|3)\s+ANO\s+EM/i,
        /^(1|2|3)\s+ANO\s+ENSINO\s+M√âDIO/i
    ];
    
    for (let padrao of padroesValidos) {
        if (padrao.test(serie)) {
            return true;
        }
    }
    
    return false;
}

// ‚úÖ 3. FUN√á√ÉO formatarSerie - Padroniza o formato da s√©rie
function formatarSerie(serie) {
    if (!serie || serie.trim() === '') {
        return '';
    }
    
    serie = serie.toUpperCase().trim();
    
    const mapeamento = {
        'PRIMEIRO ANO': '1 ANO',
        'SEGUNDO ANO': '2 ANO', 
        'TERCEIRO ANO': '3 ANO',
        '1¬∫ ANO': '1 ANO',
        '2¬∫ ANO': '2 ANO',
        '3¬∫ ANO': '3 ANO',
        '1¬∞ ANO': '1 ANO',
        '2¬∞ ANO': '2 ANO',
        '3¬∞ ANO': '3 ANO',
        '6¬∫ ANO': '6 ANO',
        '7¬∫ ANO': '7 ANO', 
        '8¬∫ ANO': '8 ANO',
        '9¬∫ ANO': '9 ANO'
    };
    
    if (mapeamento[serie]) {
        return mapeamento[serie];
    }
    
    const formatosPadronizados = [
        "1 ANO", "2 ANO", "3 ANO", "6 ANO", "7 ANO", "8 ANO", "9 ANO",
        "1 ANO EM", "2 ANO EM", "3 ANO EM"
    ];
    
    if (formatosPadronizados.includes(serie)) {
        return serie;
    }
    
    const match = serie.match(/(\d+)\s*(¬∫|¬∞)?\s*ANO/i);
    if (match) {
        return `${match[1]} ANO`;
    }
    
    return serie;
}

// ‚úÖ 4. FUN√á√ÉO testarConexaoServidor - Verifica servidor (CORRIGIDA)
async function testarConexaoServidor() {
    try {
        console.log('üåê Testando conex√£o com o servidor...');
        
        // Tentar direto primeiro
        try {
            const response = await fetch(`${API_URL}/api/health`);
            const data = await response.json();
            console.log('‚úÖ Servidor respondendo:', data);
            return true;
        } catch (directError) {
            console.log('‚ö†Ô∏è Tentativa direta falhou, usando proxy...');
            
            // Tentar com proxy CORS
            const response = await fetch(`${CORS_PROXY}${API_URL}/api/health`);
            const data = await response.json();
            console.log('‚úÖ Servidor respondendo via proxy:', data);
            return true;
        }
    } catch (error) {
        console.error('‚ùå Servidor n√£o respondendo:', error);
        alert('‚ö†Ô∏è Servidor offline! Mas voc√™ pode tentar fazer login/registro mesmo assim.');
        return false; // Continua mesmo com erro
    }
}

// ‚úÖ 5. FUN√á√ÉO fazerRequisicaoAPI - Gerencia CORS automaticamente
async function fazerRequisicaoAPI(url, options = {}) {
    try {
        // Tentar direto primeiro
        const response = await fetch(url, options);
        return response;
    } catch (error) {
        console.log('‚ö†Ô∏è Requisi√ß√£o direta falhou, tentando com proxy CORS...');
        
        // Usar proxy CORS como fallback
        const proxiedUrl = `${CORS_PROXY}${url}`;
        const response = await fetch(proxiedUrl, options);
        return response;
    }
}

// ‚úÖ 6. FUN√á√ÉO limparSessaoAntiga - Remove dados anteriores
function limparSessaoAntiga() {
    console.log('üßπ Limpando sess√£o anterior...');
    
    const itensParaLimpar = [
        'usuarioId',
        'usuarioNome', 
        'usuarioRA',
        'usuarioSerie',
        'usuarioPontuacao',
        'usuarioDesafios',
        'usuarioLogado'
    ];
    
    itensParaLimpar.forEach(item => {
        localStorage.removeItem(item);
        sessionStorage.removeItem(item);
    });
    
    console.log('‚úÖ Sess√£o anterior limpa!');
}

// ‚úÖ 7. FUN√á√ÉO salvarNovaSessao - Salva dados do usu√°rio
function salvarNovaSessao(usuario) {
    console.log('üíæ Salvando nova sess√£o...');
    
    localStorage.setItem('usuarioId', usuario.id);
    localStorage.setItem('usuarioNome', usuario.nome);
    localStorage.setItem('usuarioRA', usuario.ra);
    localStorage.setItem('usuarioSerie', usuario.serie);
    localStorage.setItem('usuarioPontuacao', usuario.pontuacao);
    localStorage.setItem('usuarioDesafios', usuario.desafiosCompletados);
    localStorage.setItem('usuarioLogado', 'true');
    
    console.log('‚úÖ Nova sess√£o salva! Usu√°rio:', usuario.nome);
}

// ‚úÖ 8. FUN√á√ÉO registrar - Processo de login/registro (CORRIGIDA)
async function registrar() {
    try {
        console.log('üü° INICIANDO PROCESSO DE LOGIN/REGISTRO...');
        
        const ra = document.getElementById('ra').value.trim();
        const nome = document.getElementById('nome').value.trim();
        const serie = document.getElementById('serie').value;
        const senha = document.getElementById('senha').value;

        // ‚úÖ VERIFICAR QUAL CASO EST√Å SENDO TENTADO
        const isLogin = ra && senha && (!nome && !serie);
        const isRegistro = ra && senha && nome && serie;

        console.log('üéØ AN√ÅLISE DO TIPO DE A√á√ÉO:');
        console.log('   - √â Login?', isLogin);
        console.log('   - √â Registro?', isRegistro);

        if (!ra) {
            alert('Por favor, informe o RA!');
            document.getElementById('ra').focus();
            return;
        }

        if (!senha) {
            alert('Por favor, informe a senha!');
            document.getElementById('senha').focus();
            return;
        }

        if (!isLogin && !isRegistro) {
            alert('Para ENTRAR: informe apenas RA e senha\nPara REGISTRAR: preencha todos os campos');
            return;
        }

        if (isRegistro) {
            if (!validarSerie(serie)) {
                alert('S√©rie inv√°lida! Formatos aceitos:\n\n' +
                      ' "6 ANO", "7 ANO", "8 ANO", "9 ANO"\n' +
                      ' "1¬∫ ANO", "2¬∫ ANO", "3¬∫ ANO"\n' +
                      ' "1 ANO EM", "2 ANO EM", "3 ANO EM"');
                document.getElementById('serie').focus();
                return;
            }
            
            const serieParaEnviar = formatarSerie(serie);
            console.log('üéØ S√©rie formatada para envio:', serieParaEnviar);
        }

        // ‚úÖ PREPARAR DADOS PARA ENVIO
        const dadosParaEnviar = {
            ra: ra,
            senha: senha,
            action: isLogin ? 'login' : 'cadastro'
        };

        // Adicionar campos apenas se for registro
        if (isRegistro) {
            dadosParaEnviar.nome = nome;
            dadosParaEnviar.serie = formatarSerie(serie);
        }

        console.log('üì§ DADOS ENVIADOS AO SERVIDOR:', { 
            ...dadosParaEnviar, 
            senha: '***' 
        });
        
        // ‚úÖ USAR FUN√á√ÉO CORRIGIDA PARA REQUISI√á√ÉO
        const response = await fazerRequisicaoAPI(`${API_URL}/api/usuarios`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(dadosParaEnviar)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Erro HTTP: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ RESPOSTA BEM-SUCEDIDA:', result);

        if (result.success) {
            // ‚úÖ LIMPAR SESS√ÉO ANTIGA E SALVAR NOVA
            limparSessaoAntiga();
            salvarNovaSessao(result.usuario);
            
            alert(`‚úÖ ${result.message}`);
            
            // ‚úÖ REDIRECIONAMENTO CORRIGIDO
            setTimeout(() => {
                console.log('üîÄ Redirecionando para Menu...');
                // Usar caminho absoluto para Vercel
                window.location.href = '/Menu/indexM.html';
            }, 1000);

        } else {
            alert(`‚ùå ${result.message}`);
        }

    } catch (error) {
        console.error('‚ùå ERRO:', error);
        alert('‚ùå Erro: ' + error.message + '\n\n‚ö†Ô∏è Problema de CORS detectado. Verifique a configura√ß√£o do servidor.');
    }
}

// ‚úÖ 9. FUN√á√ÉO fazerLogout - Limpa sess√£o
async function fazerLogout() {
    try {
        console.log('üö™ Realizando logout...');
        
        // Apenas limpar localStorage (n√£o h√° API de logout)
        limparSessaoAntiga();
        
        console.log('‚úÖ Logout realizado com sucesso!');
        window.location.href = '/Login/index.html';
        
    } catch (error) {
        console.error('‚ùå Erro no logout:', error);
        // Limpar local mesmo com erro
        limparSessaoAntiga();
        window.location.href = '/Login/index.html';
    }
}

// ‚úÖ 10. FUN√á√ÉO verificarSessaoAtiva - Verifica se usu√°rio est√° logado
function verificarSessaoAtiva() {
    const usuarioLogado = localStorage.getItem('usuarioLogado');
    const usuarioId = localStorage.getItem('usuarioId');
    
    if (usuarioLogado === 'true' && usuarioId) {
        console.log('‚úÖ Sess√£o ativa encontrada para usu√°rio ID:', usuarioId);
        return true;
    }
    
    console.log('‚ùå Nenhuma sess√£o ativa encontrada');
    return false;
}

// ‚úÖ 11. FUN√á√ÉO getUsuarioId - Retorna ID do usu√°rio
function getUsuarioId() {
    return localStorage.getItem('usuarioId');
}

// ‚úÖ 12. FUN√á√ÉO getUsuarioLogado - Retorna dados do usu√°rio
function getUsuarioLogado() {
    if (!verificarSessaoAtiva()) return null;
    
    return {
        id: localStorage.getItem('usuarioId'),
        nome: localStorage.getItem('usuarioNome'),
        ra: localStorage.getItem('usuarioRA'),
        serie: localStorage.getItem('usuarioSerie'),
        pontuacao: localStorage.getItem('usuarioPontuacao'),
        desafiosCompletados: localStorage.getItem('usuarioDesafios')
    };
}

// ‚úÖ 13. FUN√á√ÉO setupPasswordToggle - Toggle de senha
function setupPasswordToggle() {
    const toggleBtn = document.getElementById('toggleSenha');
    const senhaInput = document.getElementById('senha');
    
    if (toggleBtn && senhaInput) {
        toggleBtn.addEventListener('click', () => {
            const mostrar = senhaInput.type === 'password';
            senhaInput.type = mostrar ? 'text' : 'password';
            toggleBtn.textContent = mostrar ? 'üîì' : 'üîí';
            toggleBtn.title = mostrar ? 'Ocultar senha' : 'Mostrar senha';
        });
    }
}

// ‚úÖ 14. FUN√á√ÉO navegarPara - Navega√ß√£o inteligente
async function navegarPara(caminho) {
    console.log(`üß≠ Navegando para: ${caminho}`);
    
    // Tentar o caminho diretamente
    window.location.href = caminho;
    
    // Fallback ap√≥s 3 segundos
    setTimeout(() => {
        if (window.location.href.includes('/Login')) {
            console.log('üîÑ Primeiro redirecionamento falhou, tentando alternativas...');
            
            // Tentar caminhos alternativos
            const alternativas = [
                caminho.toLowerCase(),
                caminho.replace('indexM.html', 'index.html'),
                '/Menu/',
                '/Menu'
            ];
            
            for (let alt of alternativas) {
                console.log(`üîÑ Tentando: ${alt}`);
                window.location.href = alt;
                break; // Tenta apenas o primeiro alternativo
            }
        }
    }, 3000);
}

// ‚úÖ INICIALIZA√á√ÉO - DOMContentLoaded
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Sistema de login inicializando...');
    
    // Verificar se j√° est√° logado
    if (verificarSessaoAtiva() && window.location.pathname.includes('/Login/')) {
        console.log('üîê Usu√°rio j√° est√° logado, redirecionando para Menu...');
        navegarPara('/Menu/indexM.html');
        return;
    }
    
    // Configurar toggle de senha
    setupPasswordToggle();
    
    // Configurar eventos nos inputs
    const inputs = ['ra', 'nome', 'serie', 'senha'];
    inputs.forEach(id => {
        const input = document.getElementById(id);
        if (input) {
            input.addEventListener('input', atualizarModo);
        }
    });
    
    // Configurar bot√£o de a√ß√£o
    const btnAcao = document.getElementById('btnAcao');
    if (btnAcao) {
        btnAcao.addEventListener('click', registrar);
    }
    
    // Configurar evento de Enter
    document.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            registrar();
        }
    });
    
    // Inicializar modo
    setTimeout(atualizarModo, 100);
    
    console.log('‚úÖ Sistema de login inicializado!');
});
